#!/bin/env yab
################################
############# Prologue #############
################################

//Yabadabbadoo notification
########DO NOT RENAME THIS FILE!########
//Yabadabbadoo needs it to function.

import libclasqm_main
 
//*************************
//*****Global Variables****
//*************************
 
## Technically, yab does not require you to declare global variables,
##It just is a really, really good idea to do it anyway.
ProgramName$ = "setpermissions"
// set DEBUG = 1 to print out all messages on the console
DEBUG = 0
//change this to DEBUG = 0 when you are ready to bind the program for distribution
winx = 100
winy = 100
//placeholders for a proper positioning save and retrieval system
loadedfile$ = ""
chmodfoldervar$ = " -R "
RecurseDirectory=0

if peek("argument") then  //for localization testing only
	locale$ = left$(peek$("argument"), 2)
	langdir$="/boot/home/Desktop"
else
	langdir$ = WhereAmI$() + "/locales"
	locale$ = left$(StripLFoffSysCmd$(system$("locale -l")), 2)
endif
if locale$ = "" locale$ = "en" //failsafe

if not FileExists(langdir$ + "/" + locale$) then
	locale$ = "en"
	langdir$ = WhereAmI$() + "/locales"
endif
close #1

open langdir$ + "/" + locale$ for reading as #1
line input #1 dropfileheretext$
line input #1 makereadabletext$
line input #1 makewritabletext$
line input #1 makeexecutabletext$
line input #1 makeunreadabletext$
line input #1 makeunwritabletext$
line input #1 makeunexecutabletext$
line input #1 setmodificationdatetext$
line input #1 forcemimetext$
line input #1 recursetext$
line input #1 openfiletext$  //not used in this version
line input #1 linkwarningtext$
line input #1 timewarningtext$
line input #1 mimewarningtext$
line input #1 winwidth
close #1

if (DEBUG) then
	print langdir$
	print locale$
	print dropfileheretext$
	print makereadabletext$
	print makewritabletext$
	print makeexecutabletext$
	print makeunreadabletext$
	print makeunwritabletext$
	print makeunexecutabletext$
	print setmodificationdatetext$
	print forcemimetext$
	print recursetext$
	print openfiletext$
	print linkwarningtext$
	print timewarningtext$
	print mimewarningtext$
	print winwidth
endif

##########################
######Preliminary Commands#####
##########################

## Commands to run before the Main Loop come here.
## e.g. setting up a window with a menu.
 
OpenWindow()
 
#######End of Prologue#######


//Yabadabbadoo notification
########DO NOT RENAME THIS FILE!########
//Yabadabbadoo needs it to function.

//Main Message Loop
dim msg$(1)
while(not leavingLoop)
	nCommands = token(message$, msg$(), "|")
	for everyCommand = 1 to nCommands
		if(DEBUG and msg$(everyCommand)<>"") print msg$(everyCommand)
		switch(msg$(everyCommand))
			case "_QuitRequested":
			case "MainWindow:_QuitRequested":
				leavingLoop = true
				break
			case "readablebutton"
				if loadedfile$ = "" break
				ChangeMode("chmod a+r")
				break
			case "writablebutton"
				if loadedfile$ = "" break
				ChangeMode("chmod a+w")
				break
			case "executablebutton"
				if loadedfile$ = "" break
				ChangeMode("chmod a+x")
				break
			case "unreadablebutton"
				if loadedfile$ = "" break
				ChangeMode("chmod a-r")
				break
			case "unwritablebutton"
				if loadedfile$ = "" break
				ChangeMode("chmod a-w")
				break
			case "unexecutablebutton"
				if loadedfile$ = "" break
				ChangeMode("chmod a-x")
				break
			case "recursivecheck:OFF"
				RecurseDirectory =0
				break
			case "recursivecheck:ON"
				RecurseDirectory =1
				break
			case "touchbutton"
				if loadedfile$ = "" break
				if (RecurseDirectory) then
					system("cd '" + loadedfile$ + "';touch *")
					system("notify  --title Setpermisions --timeout 5 '" + timewarningtext$ +"' &")
				endif
				system("touch '" + loadedfile$ + "'")
				break
			case "mimebutton"
				if loadedfile$ = "" break
				if FileorDir(loadedfile$) system("notify  --title Setpermisions --timeout 5 '" + mimewarningtext$ +"' &")
				system("mimeset -F '"+ loadedfile$ + "'")
			default:
				break
		end switch
		if left$(msg$(everyCommand),18) ="dropzone:_Dropped:" 	then 
			loadedfile$ = ExamineFile$((mid$(msg$(everyCommand),19)))
		endif
	next everyCommand
wend

CloseWindow()

end

sub ChangeMode(dothis$)
	if (RecurseDirectory) dothis$ = dothis$ + chmodfoldervar$
	dothis$ = dothis$ + " '" + loadedfile$  + "'"
	system(dothis$)
	ChWindowTab(loadedfile$)
end sub

sub ChWindowTab(thefile$)
	local permissions$, accessdate$,filemimetype$
	permissions$ = mid$(system$("ls -oLd '" + thefile$ + "'"), 2,9)
	accessdate$ = left$(system$("stat --format=%y '" + thefile$ + "'"),10)
	filemimetype$= system$("file -ib '" + thefile$ + "'")
	draw flush "dropzone"
	DropzoneBorder()
	draw text 6,40, permissions$, "dropzone"
	draw text 70, 40, accessdate$, "dropzone"
	draw text 150,40, filemimetype$, "dropzone"
	window set "MainWindow", "title", thefile$  
end sub

sub CloseWindow()
	//Close down the main window
	window close "MainWindow"
end sub

sub DropzoneBorder()
	local viewwidth
	viewwidth = view get "dropzone", "width"
	draw set true, "HighSolidFill"
	draw rect 1,1 to viewwidth-1 ,49, "dropzone"
	draw rect 3,3 to viewwidth - 3,47, "dropzone"
end sub

sub DropzoneIntroText()
	local viewwidth
	viewwidth = view get "dropzone", "width"
	text 5, 10 to viewwidth-5, 20, "introtext", dropfileheretext$, "dropzone"
	text set "introtext", "align-center"
end sub

sub ExamineFile$(thefile$)
	if FileorLink(thefile$) Alert linkwarningtext$,"OK","warning"
	if FileorDir(thefile$) then
		option set "recursivecheck", "enabled", true
		checkbox set "recursivecheck", true
		RecurseDirectory = 1
	else
		option set "recursivecheck", "enabled", false
		checkbox set "recursivecheck", false
		RecurseDirectory = 0
	endif
	ChWindowTab(thefile$)
	return thefile$
end sub

sub MakeButtons()
	local rowx, originalrowx, coly, buttonwidth,buttonheight, interval, startcheckbox
	interval = 5
	rowx= interval: originalrowx= rowx
	coly = 55
	buttonwidth =  int((window get "MainWindow", "width" - (interval *4)) /3)
	buttonheight = 35
		button rowx,coly TO rowx+buttonwidth,coly + buttonheight, "readablebutton", makereadabletext$, "MainWindow"
		rowx = rowx + buttonwidth + interval
		button rowx,coly TO rowx+buttonwidth,coly + buttonheight, "writablebutton", makewritabletext$, "MainWindow"
		rowx = rowx + buttonwidth + interval
		button rowx,coly TO rowx+buttonwidth,coly + buttonheight, "executablebutton", makeexecutabletext$, "MainWindow"
	coly = coly + buttonheight + interval
	rowx = originalrowx
		button rowx,coly TO rowx+buttonwidth,coly + buttonheight, "unreadablebutton", makeunreadabletext$, "MainWindow"
		rowx = rowx + buttonwidth + interval
		button rowx,coly TO rowx+buttonwidth,coly + buttonheight, "unwritablebutton", makeunwritabletext$, "MainWindow"
		rowx = rowx + buttonwidth + interval
		button rowx,coly TO rowx+buttonwidth,coly + buttonheight, "unexecutablebutton", makeunexecutabletext$, "MainWindow"
	coly = coly + buttonheight + interval
	rowx = originalrowx
	buttonwidth = int((window get "MainWindow", "width" /2) - (interval * 1.5))
		button rowx,coly TO rowx+buttonwidth,coly + buttonheight, "touchbutton", setmodificationdatetext$, "MainWindow"
		rowx = rowx + buttonwidth + interval
		button rowx,coly TO rowx+buttonwidth,coly + buttonheight, "mimebutton", forcemimetext$, "MainWindow"
	startcheckbox = (coly + buttonheight + 5) 
	checkbox interval,startcheckbox, "recursivecheck", recursetext$, false, "MainWindow"
	option set "recursivecheck", "enabled", false
	//checkbox int((window get "MainWindow", "width" /2) +interval),startcheckbox, "openfilecheck", openfiletext$, false, "MainWindow"
	//maybe in next version, OK?
end sub

sub OpenWindow()
	//Setup the main window here
	local winheight, startcheckbox
	if winwidth = 0 winwidth=500 // default in case this is missing from a locale file.
	winheight =200
	//If the layout engine changes and the button text looks squashed, 
	//winwidth should be the only variable you need to change.
	//it is the last line in the localization file
	//
	//winx and winy are global variables - initialised in the prologue - can be used to remember window positioning in a later version. 
	window open winx,winy to (winx + winwidth), (winy+winheight), "MainWindow", "SetPermissions"
		window set "MainWindow", "flags","Not-Resizable"
		window set "MainWindow", "flags","Not-Zoomable"
		window set "MainWindow", "flags", "Accept-First-Click"
		draw set "DejaVu Sans, Book, 12", "MainWindow"
	view 0, 0 to winwidth,50, "dropzone", "MainWindow"
		DropzoneIntroText()
		DropzoneBorder(): 
		view dropzone "dropzone"
	MakeButtons()
end sub

########################################
###DATA statements, if any, come here###
########################################

